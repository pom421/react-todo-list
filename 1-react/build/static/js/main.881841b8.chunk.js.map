{"version":3,"sources":["components/FormTodo.js","components/TodoList.js","components/Filter.js","components/Footer.js","App.js","serviceWorker.js","index.js"],"names":["FormTodo","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","content","inputRef","React","createRef","current","focus","e","setState","target","value","console","log","key","handleSubmit","_this2","react_default","a","createElement","ref","placeholder","onChange","handleChange","onKeyPress","handleKeyPressed","Component","TodoList","v","todos","filter","todo","completed","style","listStyleType","getTodosWithVisibility","visibility","map","id","type","checked","toggleTodo","textDecoration","title","STATES","Filter","display","marginRight","onClick","setVisibility","toLowerCase","backgroundColor","Footer","_this$props","leftTodos","clear","length","marginLeft","generateId","i","_args","arguments","regenerator_default","wrap","_context","prev","next","undefined","stop","_marked","App","visibilityFilter","generatorId","toConsumableArray","concat","index","findIndex","newTodo","objectSpread","slice","toUpperCase","_this$state","className","components_FormTodo","addTodo","components_TodoList","components_Filter","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.881841b8.chunk.js","sourcesContent":["import React from \"react\"\n\nclass FormTodo extends React.Component {\n    state = {\n        content: \"\"\n    }\n\n    constructor(props) {\n        super(props)\n        this.inputRef = React.createRef()\n    }\n\n    componentDidMount() {\n        this.inputRef.current.focus()\n    }\n\n    handleChange(e) {\n        this.setState({\n            content: e.target.value\n        })\n    }\n\n    handleKeyPressed(e) {\n        console.log(\"key\", e.key)\n        if (e.key === \"Enter\" && this.state.content) {\n            this.props.handleSubmit(this.state.content)\n            this.setState({\n                content: \"\"\n            })\n        }\n    }\n\n    render() {\n        return (\n            <input ref={this.inputRef} placeholder=\"Add task\" value={this.state.content} onChange={(e) => this.handleChange(e)} onKeyPress={(e) => this.handleKeyPressed(e)} />\n        )\n    }\n}\n\nexport default FormTodo\n","import React from \"react\"\n\nclass TodoList extends React.Component {\n\n    getTodosWithVisibility(v) {\n        switch (v) {\n            case \"ACTIVE\":\n                return this.props.todos.filter(todo => !todo.completed)\n            case \"COMPLETED\":\n                return this.props.todos.filter(todo => todo.completed)\n            default:\n                return this.props.todos\n        }\n    }\n\n\n    render() {\n        return (\n            <ul style={{ listStyleType: \"none\" }}>\n                {\n                    this.getTodosWithVisibility(this.props.visibility).map(todo =>\n                        <li key={todo.id}><input type=\"checkbox\" checked={todo.completed} onChange={() => this.props.toggleTodo(todo.id)} />\n                            <span style={todo.completed ? { textDecoration: \"line-through\" } : null}>\n                                {todo.title}\n                            </span>\n                        </li>\n                    )\n\n                }\n            </ul>)\n    }\n}\n\nexport default TodoList\n","import React from \"react\"\n\nconst STATES = [ \"All\", \"Active\", \"Completed\"]\n\nclass Filter extends React.Component {\n\n    render() {\n        return (\n            <ul >\n                {STATES.map((state, key) =>\n                    <li key={key} style={{ display: \"inline\", marginRight: 10 }} onClick={() => this.props.setVisibility(state)}>\n                        <span style={this.props.value.toLowerCase() === state.toLowerCase() ? { backgroundColor: \"red\" } : null}>\n                            {state}\n                        </span>\n                    </li>\n                )}\n            </ul>)\n    }\n}\n\nexport default Filter\n","import React from \"react\"\n\nclass Footer extends React.Component {\n\n    render() {\n\n        const {leftTodos, clear } = this.props\n\n        return (\n            <div>\n                {leftTodos.length} items left.\n\n                <button onClick={clear} style={{ marginLeft: 20 }}>Clear completed</button>\n            </div>\n            )\n    }\n}\n\nexport default Footer\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport FormTodo from \"./components/FormTodo\"\nimport TodoList from \"./components/TodoList\"\nimport Filter from \"./components/Filter\"\nimport Footer from \"./components/Footer\"\n\nfunction* generateId(i = 0) {\n  while (true) {\n    yield i++\n  }\n}\n\nclass App extends Component {\n\n  state = {\n    todos: [\n      {\n        id: 0,\n        title: \"ejzroize\",\n        completed: false\n      },\n      {\n        id: 1,\n        title: \"azeaze\",\n        completed: false\n      },\n      {\n        id: 3,\n        title: \"bbbb\",\n        completed: false\n      }\n    ],\n    visibilityFilter: \"ALL\"\n  }\n\n  constructor(props) {\n    super(props)\n    this.generatorId = generateId(4)\n  }\n\n  componentDidMount() {\n    this.setVisibility(\"ALL\")\n  }\n\n  addTodo(todo) {\n    this.setState({\n      todos: [...this.state.todos, {\n        id: this.generatorId.next().value,\n        title: todo,\n        completed: false\n      }]\n    })\n  }\n\n  toggleTodo(id) {\n    const index = this.state.todos.findIndex(todo => todo.id === id)\n    let newTodo = {\n      ...this.state.todos[index]\n    }\n\n    newTodo.completed = !newTodo.completed\n\n    this.setState({\n      todos: [...this.state.todos.slice(0, index),\n        newTodo,\n      ...this.state.todos.slice(index + 1)\n      ]\n    })\n  }\n\n  setVisibility(v) {\n    this.setState({\n      visibilityFilter: v ? v.toUpperCase() : \"ALL\"\n    })\n  }\n\n  clear() {\n    this.setState({\n      todos: this.state.todos.filter(todo => !todo.completed)\n    })\n  }\n\n  render() {\n\n    const { todos, visibilityFilter } = this.state\n\n    return (\n      <div className=\"App\">\n\n        <h1>To do list</h1>\n        <FormTodo handleSubmit={(todo) => this.addTodo(todo)} />\n        <TodoList todos={todos} visibility={visibilityFilter} toggleTodo={(id) => this.toggleTodo(id)} />\n        <Filter value={visibilityFilter} setVisibility={(v) => this.setVisibility(v)} />\n        <Footer leftTodos={todos.filter(todo => !todo.completed)} clear={() => this.clear()} />\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}